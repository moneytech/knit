type dog {
    int age;

    function init(self, age) {
        self.age = age;
    }
    function say(self) {
        return "woof";
    }
}
type cat {
    int age;
    object sound;
    function init(self, age, sound) {
        self.age = age;
        self.sound = sound;
    }
    function say(self) {
        return self.sound;
    }
}

type duck {
    function init(self) {
    }
}

function play_sounds(array, n) {
    for i in range(n){
        animal = array[n];
        print(animal.say());
    }
}

function main() {
    list_a = [ dog(3), dog(5), cat(10) ];
    play_sounds(list_a, 3); #Ok, all types have a .say() method
    list_b = [ cat(10), dog(5), duck(3) ];
    play_sounds(list_b, 2); #OK, duck isn't reached
    play_sounds(list_b, 3); #NOT OK, duck doesn't have a .say() method

    list_c = [];
    while true {
        kind, *rest = stdin.gets().split();
        if (kind == "dog") {
            list_c.append(dog(int(rest[0]), rest[1]));
        }
        else if (kind == "cat") {
            list_c.append(cat(int(rest[0])));
        }
        else if (kind == "duck") {
            list_c.append(duck());
        }
    }
    play_sounds(list_c, len(list_c)); #NOT OK, there is a code path where list_c[i] doesn't have a .say() method
}



#Alternative
function main() {
    list_c = [];
    do_play_sounds = true;
    while true {
        kind, *rest = stdin.gets().split();
        if (kind == "dog") {
            list_c.append(dog(int(rest[0]), rest[1]));
        }
        else if (kind == "cat") {
            list_c.append(cat(int(rest[0])));
        }
        else if (kind == "duck") {
            list_c.append(duck());
            do_play_sounds = false;
        }
    }
    if (do_play_sounds)
        play_sounds(list_c, len(list_c)); #OK
}
